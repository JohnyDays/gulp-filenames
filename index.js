// Generated by CoffeeScript 1.8.0
var file_names, gutil, through;

through = require("through2");

gutil = require("gulp-util");

file_names = {};

module.exports = function(name, options) {
  var filenames;
  if (options == null) {
    options = {};
  }
  filenames = function(file, enc, done) {
    if (file.isNull()) {
      this.push(file);
    }
    if (file.isStream()) {
      this.emit("error", new gutil.PluginError("gulp-filenames", "Stream content is not supported"));
    }
    if (file.isBuffer()) {
      module.exports.register(file, name, options);
      this.push(file);
    }
    return done(null, file);
  };
  return through.obj(filenames);
};

module.exports.get = function(name, what) {
  var file_name, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _results, _results1, _results2, _results3;
  if (name == null) {
    name = 'default';
  }
  if (what == null) {
    what = 'relative';
  }
  if (name === 'all') {
    return file_names;
  }
  switch (what) {
    case 'relative':
      if (file_names[name] == null) {
        file_names[name] = [];
      }
      _ref = file_names[name];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file_name = _ref[_i];
        _results.push(file_name.relative);
      }
      return _results;
    case 'full':
      if (file_names[name] == null) {
        file_names[name] = [];
      }
      _ref1 = file_names[name];
      _results1 = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        file_name = _ref1[_j];
        _results1.push(file_name.full);
      }
      return _results1;
    case 'base':
      if (file_names[name] == null) {
        file_names[name] = [];
      }
      _ref2 = file_names[name];
      _results2 = [];
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        file_name = _ref2[_k];
        _results2.push(file_name.base);
      }
      return _results2;
    case 'all':
      if (file_names[name] == null) {
        file_names[name] = [];
      }
      return file_names[name];
    default:
      _ref3 = file_names[name];
      _results3 = [];
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        file_name = _ref3[_l];
        _results3.push(file_name.relative);
      }
      return _results3;
  }
};

module.exports.forget = function(name) {
  if (name == null) {
    name = 'default';
  }
  if (name === 'all') {
    file_names = {};
  }
  return file_names[name] = {};
};

module.exports.register = function(file, name, options) {
  if (name == null) {
    name = "default";
  }
  if (options.overrideMode) {
    file_names[name] = [];
  } else {
    if (file_names[name] == null) {
      file_names[name] = [];
    }
  }
  return file_names[name].push({
    relative: file.relative,
    full: file.path,
    base: file.base
  });
};
