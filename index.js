// Generated by CoffeeScript 1.10.0
(function() {
  var _default, file_names, gutil, through;

  through = require("through2");

  gutil = require("gulp-util");

  file_names = {};

  _default = global.Symbol ? Symbol('default') : '__default__';

  module.exports = function(name, options) {
    var filenames;
    if (options == null) {
      options = {};
    }
    if (name === 'all') {
      throw "'all' is a reserved namespace";
    }
    filenames = function(file, enc, done) {
      module.exports.register(file, name, options);
      return done(null, file);
    };
    return through.obj(filenames);
  };

  module.exports.get = function(name, what) {
    var file_name, i, j, k, l, len, len1, len2, len3, ref, ref1, ref2, ref3, results, results1, results2, results3;
    if (name == null) {
      name = _default;
    }
    if (what == null) {
      what = 'relative';
    }
    if (name === 'all') {
      return file_names;
    }
    switch (what) {
      case 'relative':
        if (file_names[name] == null) {
          file_names[name] = [];
        }
        ref = file_names[name];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          file_name = ref[i];
          results.push(file_name.relative);
        }
        return results;
      case 'full':
        if (file_names[name] == null) {
          file_names[name] = [];
        }
        ref1 = file_names[name];
        results1 = [];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          file_name = ref1[j];
          results1.push(file_name.full);
        }
        return results1;
      case 'base':
        if (file_names[name] == null) {
          file_names[name] = [];
        }
        ref2 = file_names[name];
        results2 = [];
        for (k = 0, len2 = ref2.length; k < len2; k++) {
          file_name = ref2[k];
          results2.push(file_name.base);
        }
        return results2;
      case 'all':
        if (file_names[name] == null) {
          file_names[name] = [];
        }
        return file_names[name];
      default:
        if (file_names[name] == null) {
          file_names[name] = [];
        }
        ref3 = file_names[name];
        results3 = [];
        for (l = 0, len3 = ref3.length; l < len3; l++) {
          file_name = ref3[l];
          results3.push(file_name.relative);
        }
        return results3;
    }
  };

  module.exports.forget = function(name) {
    if (name == null) {
      name = _default;
    }
    if (name === 'all') {
      file_names = {};
    }
    return file_names[name] = [];
  };

  module.exports.register = function(file, name, options) {
    if (name == null) {
      name = _default;
    }
    if (options.overrideMode) {
      file_names[name] = [];
    } else {
      if (file_names[name] == null) {
        file_names[name] = [];
      }
    }
    return file_names[name].push({
      relative: file.relative,
      full: file.path,
      base: file.base
    });
  };

}).call(this);
